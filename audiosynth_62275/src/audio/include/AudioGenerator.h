#ifndef SIMPLE_SYNTH_AUDIOGENERATOR_H
#define SIMPLE_SYNTH_AUDIOGENERATOR_H

#include "portaudio.h"
#include "TripleOscillator.h"
#include "SynthParams.h"
#include "Filter.h"

#include <mutex>

// AudioGenerator: manages audio stream and real-time audio processing
// Uses PortAudio to output sound generated by the synth engine
class AudioGenerator {
public:
    // Constructor: initializes synth modules with sample rate
    AudioGenerator(SynthParams* params);

    // Destructor: ensures audio stream is stopped
    ~AudioGenerator();
    
    // Initialize audio stream
    void init();

    // Stop audio stream and clean up
    void stop();

    // Synth parameter setters: forward calls to TripleOscillator
    void setFrequency(double freq);
    void setOsc1Enabled(bool enabled);
    void setOsc2Enabled(bool enabled);
    void setOsc3Enabled(bool enabled);
    void setOsc1Waveform(Oscillator::Waveform wf);
    void setOsc2Waveform(Oscillator::Waveform wf);
    void setOsc3Waveform(Oscillator::Waveform wf);

    void setOsc1FrequencyOffset(float offset);
    void setOsc2FrequencyOffset(float offset);
    void setOsc3FrequencyOffset(float offset);

    void setOscSampleRate(float sr);
    void setAttack(float a);
    void setRelease(float r);
    void noteOn();
    void noteOff();

    // Utility function: convert MIDI note number to frequency (Hz)
    static double calculateNoteFrequency(int noteNumber, int octave);

private:
    // PortAudio callback function (called repeatedly to fill audio buffer)
    static int audioCallback(const void *inputBuffer, 
                           void *outputBuffer,
                           unsigned long framesPerBuffer,
                           const PaStreamCallbackTimeInfo* timeInfo,
                           PaStreamCallbackFlags statusFlags,
                           void *userData);

    std::mutex mutex;         // Mutex to protect access to parameters
    PaStream* stream;          // PortAudio stream handle
    TripleOscillator oscillator; // Synth engine: 3 oscillators + envelope
    SynthParams* params;       // Pointer to user-defined parameters (UI-controlled)
    LowPassFilter filter;      // Low-pass filter

};



#endif //SIMPLE_SYNTH_AUDIOGENERATOR_H
